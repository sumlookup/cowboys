// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sumlookup/cowboys/pb (interfaces: CowboysServiceClient,CowboysServiceServer)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cowboys "github.com/sumlookup/cowboys/pb"
	grpc "google.golang.org/grpc"
)

// MockCowboysServiceClient is a mock of CowboysServiceClient interface.
type MockCowboysServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCowboysServiceClientMockRecorder
}

// MockCowboysServiceClientMockRecorder is the mock recorder for MockCowboysServiceClient.
type MockCowboysServiceClientMockRecorder struct {
	mock *MockCowboysServiceClient
}

// NewMockCowboysServiceClient creates a new mock instance.
func NewMockCowboysServiceClient(ctrl *gomock.Controller) *MockCowboysServiceClient {
	mock := &MockCowboysServiceClient{ctrl: ctrl}
	mock.recorder = &MockCowboysServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCowboysServiceClient) EXPECT() *MockCowboysServiceClientMockRecorder {
	return m.recorder
}

// GetGameLogs mocks base method.
func (m *MockCowboysServiceClient) GetGameLogs(arg0 context.Context, arg1 *cowboys.GetGameLogsRequest, arg2 ...grpc.CallOption) (*cowboys.GetGameLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGameLogs", varargs...)
	ret0, _ := ret[0].(*cowboys.GetGameLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameLogs indicates an expected call of GetGameLogs.
func (mr *MockCowboysServiceClientMockRecorder) GetGameLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameLogs", reflect.TypeOf((*MockCowboysServiceClient)(nil).GetGameLogs), varargs...)
}

// ReloadDefaultCowboys mocks base method.
func (m *MockCowboysServiceClient) ReloadDefaultCowboys(arg0 context.Context, arg1 *cowboys.ReloadDefaultCowboysRequest, arg2 ...grpc.CallOption) (*cowboys.ReloadDefaultCowboysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReloadDefaultCowboys", varargs...)
	ret0, _ := ret[0].(*cowboys.ReloadDefaultCowboysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReloadDefaultCowboys indicates an expected call of ReloadDefaultCowboys.
func (mr *MockCowboysServiceClientMockRecorder) ReloadDefaultCowboys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadDefaultCowboys", reflect.TypeOf((*MockCowboysServiceClient)(nil).ReloadDefaultCowboys), varargs...)
}

// Run mocks base method.
func (m *MockCowboysServiceClient) Run(arg0 context.Context, arg1 *cowboys.RunRequest, arg2 ...grpc.CallOption) (*cowboys.RunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(*cowboys.RunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockCowboysServiceClientMockRecorder) Run(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCowboysServiceClient)(nil).Run), varargs...)
}

// ShootAtRandom mocks base method.
func (m *MockCowboysServiceClient) ShootAtRandom(arg0 context.Context, arg1 *cowboys.ShootAtRandomRequest, arg2 ...grpc.CallOption) (*cowboys.ShootAtRandomResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShootAtRandom", varargs...)
	ret0, _ := ret[0].(*cowboys.ShootAtRandomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShootAtRandom indicates an expected call of ShootAtRandom.
func (mr *MockCowboysServiceClientMockRecorder) ShootAtRandom(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShootAtRandom", reflect.TypeOf((*MockCowboysServiceClient)(nil).ShootAtRandom), varargs...)
}

// MockCowboysServiceServer is a mock of CowboysServiceServer interface.
type MockCowboysServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCowboysServiceServerMockRecorder
}

// MockCowboysServiceServerMockRecorder is the mock recorder for MockCowboysServiceServer.
type MockCowboysServiceServerMockRecorder struct {
	mock *MockCowboysServiceServer
}

// NewMockCowboysServiceServer creates a new mock instance.
func NewMockCowboysServiceServer(ctrl *gomock.Controller) *MockCowboysServiceServer {
	mock := &MockCowboysServiceServer{ctrl: ctrl}
	mock.recorder = &MockCowboysServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCowboysServiceServer) EXPECT() *MockCowboysServiceServerMockRecorder {
	return m.recorder
}

// GetGameLogs mocks base method.
func (m *MockCowboysServiceServer) GetGameLogs(arg0 context.Context, arg1 *cowboys.GetGameLogsRequest) (*cowboys.GetGameLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameLogs", arg0, arg1)
	ret0, _ := ret[0].(*cowboys.GetGameLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameLogs indicates an expected call of GetGameLogs.
func (mr *MockCowboysServiceServerMockRecorder) GetGameLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameLogs", reflect.TypeOf((*MockCowboysServiceServer)(nil).GetGameLogs), arg0, arg1)
}

// ReloadDefaultCowboys mocks base method.
func (m *MockCowboysServiceServer) ReloadDefaultCowboys(arg0 context.Context, arg1 *cowboys.ReloadDefaultCowboysRequest) (*cowboys.ReloadDefaultCowboysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadDefaultCowboys", arg0, arg1)
	ret0, _ := ret[0].(*cowboys.ReloadDefaultCowboysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReloadDefaultCowboys indicates an expected call of ReloadDefaultCowboys.
func (mr *MockCowboysServiceServerMockRecorder) ReloadDefaultCowboys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadDefaultCowboys", reflect.TypeOf((*MockCowboysServiceServer)(nil).ReloadDefaultCowboys), arg0, arg1)
}

// Run mocks base method.
func (m *MockCowboysServiceServer) Run(arg0 context.Context, arg1 *cowboys.RunRequest) (*cowboys.RunResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(*cowboys.RunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockCowboysServiceServerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCowboysServiceServer)(nil).Run), arg0, arg1)
}

// ShootAtRandom mocks base method.
func (m *MockCowboysServiceServer) ShootAtRandom(arg0 context.Context, arg1 *cowboys.ShootAtRandomRequest) (*cowboys.ShootAtRandomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShootAtRandom", arg0, arg1)
	ret0, _ := ret[0].(*cowboys.ShootAtRandomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShootAtRandom indicates an expected call of ShootAtRandom.
func (mr *MockCowboysServiceServerMockRecorder) ShootAtRandom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShootAtRandom", reflect.TypeOf((*MockCowboysServiceServer)(nil).ShootAtRandom), arg0, arg1)
}

// mustEmbedUnimplementedCowboysServiceServer mocks base method.
func (m *MockCowboysServiceServer) mustEmbedUnimplementedCowboysServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCowboysServiceServer")
}

// mustEmbedUnimplementedCowboysServiceServer indicates an expected call of mustEmbedUnimplementedCowboysServiceServer.
func (mr *MockCowboysServiceServerMockRecorder) mustEmbedUnimplementedCowboysServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCowboysServiceServer", reflect.TypeOf((*MockCowboysServiceServer)(nil).mustEmbedUnimplementedCowboysServiceServer))
}
