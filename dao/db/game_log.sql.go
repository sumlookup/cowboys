// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: game_log.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countAllGameLogs = `-- name: CountAllGameLogs :one
SELECT count(*) as total_count FROM game_logs WHERE game_id = $1
`

func (q *Queries) CountAllGameLogs(ctx context.Context, gameID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAllGameLogs, gameID)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const createGameLog = `-- name: CreateGameLog :exec
INSERT INTO game_logs (game_id, shooter_id, receiver_id, damage, receiver_health, shooter_health) VALUES
    ($1, $2, $3, $4, $5, $6)
`

type CreateGameLogParams struct {
	GameID         uuid.UUID `json:"game_id"`
	ShooterID      uuid.UUID `json:"shooter_id"`
	ReceiverID     uuid.UUID `json:"receiver_id"`
	Damage         int32     `json:"damage"`
	ReceiverHealth int32     `json:"receiver_health"`
	ShooterHealth  int32     `json:"shooter_health"`
}

func (q *Queries) CreateGameLog(ctx context.Context, arg CreateGameLogParams) error {
	_, err := q.db.Exec(ctx, createGameLog,
		arg.GameID,
		arg.ShooterID,
		arg.ReceiverID,
		arg.Damage,
		arg.ReceiverHealth,
		arg.ShooterHealth,
	)
	return err
}

const listGameLogsByGameId = `-- name: ListGameLogsByGameId :many
SELECT id, created_at, game_id, shooter_id, receiver_id, damage, receiver_health, shooter_health FROM game_logs WHERE game_id = $1
ORDER BY
    CASE WHEN $2::text = 'desc' THEN created_at END DESC,
    CASE WHEN $2::text = 'asc' THEN created_at END ASC
LIMIT $4::int
OFFSET $3::int
`

type ListGameLogsByGameIdParams struct {
	GameID      uuid.UUID `json:"game_id"`
	QuerySort   string    `json:"query_sort"`
	QueryOffset int32     `json:"query_offset"`
	QueryLimit  int32     `json:"query_limit"`
}

func (q *Queries) ListGameLogsByGameId(ctx context.Context, arg ListGameLogsByGameIdParams) ([]*GameLog, error) {
	rows, err := q.db.Query(ctx, listGameLogsByGameId,
		arg.GameID,
		arg.QuerySort,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GameLog
	for rows.Next() {
		var i GameLog
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.GameID,
			&i.ShooterID,
			&i.ReceiverID,
			&i.Damage,
			&i.ReceiverHealth,
			&i.ShooterHealth,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
