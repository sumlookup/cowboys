// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: game_log.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createGameLog = `-- name: CreateGameLog :one
INSERT INTO game_logs (game_id, shooter, receiver, damage) VALUES ($1, $2, $3, $4) RETURNING id::uuid
`

type CreateGameLogParams struct {
	GameID   uuid.UUID `json:"game_id"`
	Shooter  uuid.UUID `json:"shooter"`
	Receiver uuid.UUID `json:"receiver"`
	Damage   int32     `json:"damage"`
}

func (q *Queries) CreateGameLog(ctx context.Context, arg CreateGameLogParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createGameLog,
		arg.GameID,
		arg.Shooter,
		arg.Receiver,
		arg.Damage,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const listGameLogsByGameId = `-- name: ListGameLogsByGameId :many
SELECT id, created_at, updated_at, deleted_at, game_id, shooter, receiver, damage FROM game_logs WHERE game_id = $1 AND
    deleted_at IS NULL
ORDER BY
    CASE WHEN $2::text = 'desc' THEN created_at END DESC,
    CASE WHEN $2::text = 'asc' THEN created_at END ASC
LIMIT $4::int
    OFFSET $3::int
`

type ListGameLogsByGameIdParams struct {
	GameID      uuid.UUID `json:"game_id"`
	QuerySort   string    `json:"query_sort"`
	QueryOffset int32     `json:"query_offset"`
	QueryLimit  int32     `json:"query_limit"`
}

func (q *Queries) ListGameLogsByGameId(ctx context.Context, arg ListGameLogsByGameIdParams) ([]*GameLog, error) {
	rows, err := q.db.Query(ctx, listGameLogsByGameId,
		arg.GameID,
		arg.QuerySort,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GameLog
	for rows.Next() {
		var i GameLog
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.GameID,
			&i.Shooter,
			&i.Receiver,
			&i.Damage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
