// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: game.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (mode) VALUES ($1) RETURNING id::uuid
`

func (q *Queries) CreateGame(ctx context.Context, mode string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createGame, mode)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getGameById = `-- name: GetGameById :one
SELECT id, created_at, updated_at, deleted_at, mode, winner, winner_id, ended FROM games WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetGameById(ctx context.Context, id uuid.UUID) (*Game, error) {
	row := q.db.QueryRow(ctx, getGameById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Mode,
		&i.Winner,
		&i.WinnerID,
		&i.Ended,
	)
	return &i, err
}

const updateGameWinner = `-- name: UpdateGameWinner :exec
UPDATE games SET winner = $1, winner_id = $2::uuid, ended = true,
    updated_at = NOW() WHERE id = $3::uuid
`

type UpdateGameWinnerParams struct {
	Winner   string    `json:"winner"`
	WinnerID uuid.UUID `json:"winner_id"`
	GameID   uuid.UUID `json:"game_id"`
}

func (q *Queries) UpdateGameWinner(ctx context.Context, arg UpdateGameWinnerParams) error {
	_, err := q.db.Exec(ctx, updateGameWinner, arg.Winner, arg.WinnerID, arg.GameID)
	return err
}
