// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createManyCowboys = `-- name: CreateManyCowboys :batchmany
INSERT INTO cowboys (name, health, damage) VALUES ($1, $2, $3) RETURNING id, created_at, updated_at, deleted_at, name, health, damage
`

type CreateManyCowboysBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateManyCowboysParams struct {
	Name   string `json:"name"`
	Health int32  `json:"health"`
	Damage int32  `json:"damage"`
}

func (q *Queries) CreateManyCowboys(ctx context.Context, arg []CreateManyCowboysParams) *CreateManyCowboysBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Name,
			a.Health,
			a.Damage,
		}
		batch.Queue(createManyCowboys, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateManyCowboysBatchResults{br, len(arg), false}
}

func (b *CreateManyCowboysBatchResults) Query(f func(int, []*Cowboy, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []*Cowboy
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i Cowboy
				if err := rows.Scan(
					&i.ID,
					&i.CreatedAt,
					&i.UpdatedAt,
					&i.DeletedAt,
					&i.Name,
					&i.Health,
					&i.Damage,
				); err != nil {
					return err
				}
				items = append(items, &i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateManyCowboysBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
