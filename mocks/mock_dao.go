// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao/db/querier.go

// Package mock_db is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/sumlookup/cowboys/dao/db"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CountAllGameLogs mocks base method.
func (m *MockQuerier) CountAllGameLogs(ctx context.Context, gameID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllGameLogs", ctx, gameID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllGameLogs indicates an expected call of CountAllGameLogs.
func (mr *MockQuerierMockRecorder) CountAllGameLogs(ctx, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllGameLogs", reflect.TypeOf((*MockQuerier)(nil).CountAllGameLogs), ctx, gameID)
}

// CreateCowboy mocks base method.
func (m *MockQuerier) CreateCowboy(ctx context.Context, arg db.CreateCowboyParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCowboy", ctx, arg)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCowboy indicates an expected call of CreateCowboy.
func (mr *MockQuerierMockRecorder) CreateCowboy(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCowboy", reflect.TypeOf((*MockQuerier)(nil).CreateCowboy), ctx, arg)
}

// CreateGame mocks base method.
func (m *MockQuerier) CreateGame(ctx context.Context, mode string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", ctx, mode)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockQuerierMockRecorder) CreateGame(ctx, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockQuerier)(nil).CreateGame), ctx, mode)
}

// CreateGameLog mocks base method.
func (m *MockQuerier) CreateGameLog(ctx context.Context, arg db.CreateGameLogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGameLog", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGameLog indicates an expected call of CreateGameLog.
func (mr *MockQuerierMockRecorder) CreateGameLog(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGameLog", reflect.TypeOf((*MockQuerier)(nil).CreateGameLog), ctx, arg)
}

// CreateManyCowboys mocks base method.
func (m *MockQuerier) CreateManyCowboys(ctx context.Context, arg []db.CreateManyCowboysParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManyCowboys", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManyCowboys indicates an expected call of CreateManyCowboys.
func (mr *MockQuerierMockRecorder) CreateManyCowboys(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManyCowboys", reflect.TypeOf((*MockQuerier)(nil).CreateManyCowboys), ctx, arg)
}

// DeleteAllCowboys mocks base method.
func (m *MockQuerier) DeleteAllCowboys(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCowboys", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllCowboys indicates an expected call of DeleteAllCowboys.
func (mr *MockQuerierMockRecorder) DeleteAllCowboys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCowboys", reflect.TypeOf((*MockQuerier)(nil).DeleteAllCowboys), ctx)
}

// GetGameById mocks base method.
func (m *MockQuerier) GetGameById(ctx context.Context, id uuid.UUID) (*db.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameById", ctx, id)
	ret0, _ := ret[0].(*db.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameById indicates an expected call of GetGameById.
func (mr *MockQuerierMockRecorder) GetGameById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameById", reflect.TypeOf((*MockQuerier)(nil).GetGameById), ctx, id)
}

// GetRandomCowboy mocks base method.
func (m *MockQuerier) GetRandomCowboy(ctx context.Context, id uuid.UUID) (*db.Cowboy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomCowboy", ctx, id)
	ret0, _ := ret[0].(*db.Cowboy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomCowboy indicates an expected call of GetRandomCowboy.
func (mr *MockQuerierMockRecorder) GetRandomCowboy(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomCowboy", reflect.TypeOf((*MockQuerier)(nil).GetRandomCowboy), ctx, id)
}

// GetSingleAliveCowboyAndCount mocks base method.
func (m *MockQuerier) GetSingleAliveCowboyAndCount(ctx context.Context, id uuid.UUID) (*db.GetSingleAliveCowboyAndCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleAliveCowboyAndCount", ctx, id)
	ret0, _ := ret[0].(*db.GetSingleAliveCowboyAndCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleAliveCowboyAndCount indicates an expected call of GetSingleAliveCowboyAndCount.
func (mr *MockQuerierMockRecorder) GetSingleAliveCowboyAndCount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleAliveCowboyAndCount", reflect.TypeOf((*MockQuerier)(nil).GetSingleAliveCowboyAndCount), ctx, id)
}

// GetSingleAliveCowboyById mocks base method.
func (m *MockQuerier) GetSingleAliveCowboyById(ctx context.Context, id uuid.UUID) (*db.Cowboy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleAliveCowboyById", ctx, id)
	ret0, _ := ret[0].(*db.Cowboy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleAliveCowboyById indicates an expected call of GetSingleAliveCowboyById.
func (mr *MockQuerierMockRecorder) GetSingleAliveCowboyById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleAliveCowboyById", reflect.TypeOf((*MockQuerier)(nil).GetSingleAliveCowboyById), ctx, id)
}

// GetSingleCowboyByName mocks base method.
func (m *MockQuerier) GetSingleCowboyByName(ctx context.Context, name string) (*db.Cowboy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleCowboyByName", ctx, name)
	ret0, _ := ret[0].(*db.Cowboy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleCowboyByName indicates an expected call of GetSingleCowboyByName.
func (mr *MockQuerierMockRecorder) GetSingleCowboyByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleCowboyByName", reflect.TypeOf((*MockQuerier)(nil).GetSingleCowboyByName), ctx, name)
}

// GetSingleCowboyHealth mocks base method.
func (m *MockQuerier) GetSingleCowboyHealth(ctx context.Context, id uuid.UUID) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleCowboyHealth", ctx, id)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleCowboyHealth indicates an expected call of GetSingleCowboyHealth.
func (mr *MockQuerierMockRecorder) GetSingleCowboyHealth(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleCowboyHealth", reflect.TypeOf((*MockQuerier)(nil).GetSingleCowboyHealth), ctx, id)
}

// ListAliveCowboys mocks base method.
func (m *MockQuerier) ListAliveCowboys(ctx context.Context, arg db.ListAliveCowboysParams) ([]*db.Cowboy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliveCowboys", ctx, arg)
	ret0, _ := ret[0].([]*db.Cowboy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliveCowboys indicates an expected call of ListAliveCowboys.
func (mr *MockQuerierMockRecorder) ListAliveCowboys(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliveCowboys", reflect.TypeOf((*MockQuerier)(nil).ListAliveCowboys), ctx, arg)
}

// ListGameLogsByGameId mocks base method.
func (m *MockQuerier) ListGameLogsByGameId(ctx context.Context, arg db.ListGameLogsByGameIdParams) ([]*db.GameLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGameLogsByGameId", ctx, arg)
	ret0, _ := ret[0].([]*db.GameLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGameLogsByGameId indicates an expected call of ListGameLogsByGameId.
func (mr *MockQuerierMockRecorder) ListGameLogsByGameId(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGameLogsByGameId", reflect.TypeOf((*MockQuerier)(nil).ListGameLogsByGameId), ctx, arg)
}

// ReduceCowboyHealth mocks base method.
func (m *MockQuerier) ReduceCowboyHealth(ctx context.Context, arg db.ReduceCowboyHealthParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReduceCowboyHealth", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReduceCowboyHealth indicates an expected call of ReduceCowboyHealth.
func (mr *MockQuerierMockRecorder) ReduceCowboyHealth(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceCowboyHealth", reflect.TypeOf((*MockQuerier)(nil).ReduceCowboyHealth), ctx, arg)
}

// UpdateCowboyHealth mocks base method.
func (m *MockQuerier) UpdateCowboyHealth(ctx context.Context, arg db.UpdateCowboyHealthParams) (*db.Cowboy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCowboyHealth", ctx, arg)
	ret0, _ := ret[0].(*db.Cowboy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCowboyHealth indicates an expected call of UpdateCowboyHealth.
func (mr *MockQuerierMockRecorder) UpdateCowboyHealth(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCowboyHealth", reflect.TypeOf((*MockQuerier)(nil).UpdateCowboyHealth), ctx, arg)
}

// UpdateGameWinner mocks base method.
func (m *MockQuerier) UpdateGameWinner(ctx context.Context, arg db.UpdateGameWinnerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameWinner", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameWinner indicates an expected call of UpdateGameWinner.
func (mr *MockQuerierMockRecorder) UpdateGameWinner(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameWinner", reflect.TypeOf((*MockQuerier)(nil).UpdateGameWinner), ctx, arg)
}
